// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    google_sub, study_id, email, full_name, pfp, hd
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, study_id, google_sub, email, full_name, pfp, hd, created_at
`

type CreateUserParams struct {
	GoogleSub string
	StudyID   pgtype.Int4
	Email     string
	FullName  pgtype.Text
	Pfp       pgtype.Text
	Hd        pgtype.Text
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.GoogleSub,
		arg.StudyID,
		arg.Email,
		arg.FullName,
		arg.Pfp,
		arg.Hd,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.StudyID,
		&i.GoogleSub,
		&i.Email,
		&i.FullName,
		&i.Pfp,
		&i.Hd,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, study_id, google_sub, email, full_name, pfp, hd, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.StudyID,
		&i.GoogleSub,
		&i.Email,
		&i.FullName,
		&i.Pfp,
		&i.Hd,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, study_id, google_sub, email, full_name, pfp, hd, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.StudyID,
		&i.GoogleSub,
		&i.Email,
		&i.FullName,
		&i.Pfp,
		&i.Hd,
		&i.CreatedAt,
	)
	return i, err
}
