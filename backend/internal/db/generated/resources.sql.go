// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resources.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createResource = `-- name: CreateResource :one
INSERT INTO resources (
    owner_id, subject_id, title, description, file_url, file_size
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, owner_id, subject_id, title, description, file_url, file_size, created_at
`

type CreateResourceParams struct {
	OwnerID     int32
	SubjectID   int32
	Title       string
	Description pgtype.Text
	FileUrl     string
	FileSize    pgtype.Int8
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRow(ctx, createResource,
		arg.OwnerID,
		arg.SubjectID,
		arg.Title,
		arg.Description,
		arg.FileUrl,
		arg.FileSize,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.SubjectID,
		&i.Title,
		&i.Description,
		&i.FileUrl,
		&i.FileSize,
		&i.CreatedAt,
	)
	return i, err
}

const getResource = `-- name: GetResource :one
SELECT id, owner_id, subject_id, title, description, file_url, file_size, created_at FROM resources
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetResource(ctx context.Context, id int32) (Resource, error) {
	row := q.db.QueryRow(ctx, getResource, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.SubjectID,
		&i.Title,
		&i.Description,
		&i.FileUrl,
		&i.FileSize,
		&i.CreatedAt,
	)
	return i, err
}

const listResourcesByOwner = `-- name: ListResourcesByOwner :many
SELECT id, owner_id, subject_id, title, description, file_url, file_size, created_at FROM resources
WHERE owner_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListResourcesByOwner(ctx context.Context, ownerID int32) ([]Resource, error) {
	rows, err := q.db.Query(ctx, listResourcesByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.SubjectID,
			&i.Title,
			&i.Description,
			&i.FileUrl,
			&i.FileSize,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResourcesBySubject = `-- name: ListResourcesBySubject :many
SELECT id, owner_id, subject_id, title, description, file_url, file_size, created_at FROM resources
WHERE subject_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListResourcesBySubject(ctx context.Context, subjectID int32) ([]Resource, error) {
	rows, err := q.db.Query(ctx, listResourcesBySubject, subjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.SubjectID,
			&i.Title,
			&i.Description,
			&i.FileUrl,
			&i.FileSize,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
