// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subjects.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSubject = `-- name: CreateSubject :one
INSERT INTO subjects (
    name, code, year
) VALUES (
    $1, $2, $3
)
RETURNING id, name, code, year
`

type CreateSubjectParams struct {
	Name string
	Code string
	Year pgtype.Text
}

func (q *Queries) CreateSubject(ctx context.Context, arg CreateSubjectParams) (Subject, error) {
	row := q.db.QueryRow(ctx, createSubject, arg.Name, arg.Code, arg.Year)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Year,
	)
	return i, err
}

const getSubject = `-- name: GetSubject :one
SELECT id, name, code, year FROM subjects
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubject(ctx context.Context, id int32) (Subject, error) {
	row := q.db.QueryRow(ctx, getSubject, id)
	var i Subject
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Year,
	)
	return i, err
}

const listSubjects = `-- name: ListSubjects :many
SELECT id, name, code, year FROM subjects
GROUP BY year
ORDER BY name
`

func (q *Queries) ListSubjects(ctx context.Context) ([]Subject, error) {
	rows, err := q.db.Query(ctx, listSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subject
	for rows.Next() {
		var i Subject
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Year,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
